// 1. Mueblería: Actualización de Precios

// En una mueblería, se requiere un sistema que permita actualizar los precios de
// los muebles cada vez que cambien. Cada mueble tiene un nombre, un precio y
// un identificador único. Implementa las siguientes funciones:
// • Añadir un nuevo mueble.
// • Actualizar el precio de un mueble después de 3 segundos utilizando
// setTimeout().
// • Mostrar el inventario de muebles.

class Mueble{
    protected id: number;
    protected nombre: string; 
    protected precio: number;

    constructor(nombre: string, precio: number){
        this.id = 0;
        this.nombre = nombre;
        this.precio = precio;
    }

    detalles(): void{
        console.log(`Mueble: ${this.id} ${this.nombre} precio: ${this.precio}`);
    }

    public getId():number{
        return this.id;
    }

    public setId(id:number): void{
        this.id = id;
    }
    public getNombre(): string{
        return this.nombre;
    }
    public setPrecio(nuevoPrecio: number): void {
        this.precio = nuevoPrecio;
    }

    public getPrecio(): number {
        return this.precio;
    }
}

class Muebleria{
    protected nombre: string;
    protected muebles: Mueble[];

    constructor(nombre: string){
        this.nombre = nombre;
        this.muebles = [];
    }

    agregarMueble(mueble: Mueble): void{
        mueble.setId(this.muebles.length+1);
        this.muebles.push(mueble);
    }

    actualizarPrecio(id: number, precio: number): void{
        if(precio > 0){
            let mueble = this.muebles.find((mueble) => mueble.getId() === id);
            if(mueble){
                setTimeout(() => {
                    mueble.setPrecio(precio);
                    console.log(`Precio del mueble ID ${id} actualizado a $${precio}`);
                },3000)
            } else {
                console.log(`El mueble ingresado no ha sido encontrado`);
            }
        } else {
            console.log(`El precio debe ser mayor a 0`);
        }
    }

    mostrarInventario(): void{
        console.log(`\n-------------------------------INVENTARIO------------------------------------`);
        
        this.muebles.forEach((mueble)=> {
            console.log(`Mueble: ${mueble.getId()} ${mueble.getNombre()} precio: ${mueble.getPrecio()}`);
            
        })
        console.log('-----------------------------------------------------------------------\n');
    }
}

const muebleria = new Muebleria('La Muebleria Bahiense');
const silla = new Mueble('Sillon',300);
muebleria.agregarMueble(sillon)

muebleria.actualizarPrecio(silla.getId(), 400);
muebleria.mostrarInventario();

EJERCICIO 2

// 2. Florería: Envío Programado de Pedidos

// Crea un sistema que gestione el envío de pedidos de flores. Cada pedido debe
// contener el nombre del cliente, la cantidad de flores y el tipo de flores.
// Implementa las siguientes funciones:
// • Añadir un pedido.
// • Programar el envío de un pedido utilizando setTimeout() para simular un
// retraso de 5 segundos.
// • Mostrar todos los pedidos pendientes.
class Pedido {
    private nombreCliente:string;
    private cantidadFlores: number;
    private tipoFlores: string[];
    private estado: string;

    constructor(nombreCliente: string, cantidadFlores: number, tipoFlores: string[]) {
        this.nombreCliente = nombreCliente;
        this.cantidadFlores = cantidadFlores;
        this.tipoFlores = tipoFlores;
        this.estado = 'Pendiente';
    }

    public getNombreCliente(): string{
        return this.nombreCliente;
    }

    public getCantidadFlores():number{
        return this.cantidadFlores;
    }
    public getTipoFlores(): string[]{
        return this.tipoFlores;
    }

    public getEstado():string{
        return this.estado;
    }
    public setEstado(estado: string): void{
        this.estado = estado;
    }

    public mostrarDetalles(): void{
        let flores = this.tipoFlores.join('- ');
        console.log(`Cliente: ${this.nombreCliente}, #flores: ${this.cantidadFlores}, flores: ${flores} estado: ${this.estado} `);
    }
}

class Floreria{
    private nombre: string;
    private pedidos: Pedido [];

    constructor(nombre: string){
        this.nombre = nombre;
        this.pedidos = [];
    }

    public getNombre(): string{
        return this.nombre;
    }

    agregarPedido(pedido: Pedido):void{
        this.pedidos.push(pedido);
        console.log(`Pedido agregado para ${pedido.getNombreCliente()}`);
    }

    programarPedido(pedido: Pedido):void{
        if(pedido.getEstado() === 'Pendiente'){
            console.log(`El pedido del cliente ${pedido.getNombreCliente()} ha sido programado`)
            setTimeout(() => {
                pedido.setEstado('Finalizado');
                console.log(`✅ Pedido de ${pedido.getNombreCliente()} ha sido enviado.`);
                this.mostrarPedidosPendientes();
            },5000)
        } else {
            console.log('El pedido ya fue finalizado');
        }
    }

    mostrarPedidosPendientes(): void {
        let pedidosPendientes = this.pedidos.filter((pedido) => (pedido.getEstado() === 'Pendiente'));
        if(pedidosPendientes.length > 0){
            console.log(`\n--------------------PEDIDOS PENDIENTES----------------------`);
            pedidosPendientes.forEach(pedido => pedido.mostrarDetalles());
            console.log('-------------------------------------------------------------\n');
        } else {
            console.log(`No hay pedidos pendientes`);
        }
    }
}

let pedido1 = new Pedido('Nina Alvarez', 10, ['Margaritas', 'Hortensias', 'Claveles']);
let pedido2 = new Pedido('Maria Fernandez', 20, ['Rosas', 'Malvon', 'Orquidea']);
let pedido3 = new Pedido('Martina Lopez, 20, ['Gardenia', 'Lirio', Narciso']);

let floreria1 = new Floreria('Florigrafia');
floreria1.agregarPedido(pedido1);
floreria1.agregarPedido(pedido2);
floreria1.agregarPedido(pedido3);
floreria1.mostrarPedidosPendientes();


floreria1.programarPedido(pedido1);
floreria1.programarPedido(pedido2);
floreria1.programarPedido(pedido3);
floreria1.programarPedido(pedido1);

// floreria1.mostrarPedidosPendientes();
