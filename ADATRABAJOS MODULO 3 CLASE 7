  Ejercicio 1 - Coche
// Diseña una clase Coche que represente un vehículo. Esta clase debe tener
// propiedades privadas para marca, modelo, año, y kilometraje. Implementa
// métodos para encender el coche y realizar un viaje, que incrementen el
// kilometraje. Asegúrate de que el año no sea menor que 1886 (el año en que se
// inventó el coche) y que el kilometraje no pueda ser negativo. Si se intenta
// establecer un año o kilometraje no válido, imprime un mensaje indicando el
// error.

class Coche{
    private _marca: string;
    private _modelo: string;
    private _anio:number;
    private _kilometraje: number;

    constructor(_marca: string, _modelo: string){
        this._marca = _marca;
        this._modelo = _modelo;
        this._anio = 0;
        this._kilometraje = 0;
    }

    public encenderCoche(): void{
        console.log(`El coche ha sido encendido`);
    }

    public realizarViaje(): void{
        this._kilometraje++;
        console.log(`Nuevo kilometraje: ${this._kilometraje}`);
        
    }

    public set anio(anio: number){
        if(anio >= 1886){
            this._anio = anio;
        } else {
            console.log(`El año no debe ser menor que 1886`);
        }
    }

EJERCICIO 2

// Crea una clase Libro que represente un libro en una biblioteca.
Esta clase debe
// tener propiedades privadas para titulo, autor, anioPublicacion, y disponible.
// Implementa métodos para prestar y devolver el libro, asegurando que solo se
// pueda prestar si está disponible y que se pueda devolver solo si ha sido
// prestado. Imprime un mensaje en caso de que se intente realizar una acción no
// válida.

class Libro{
    private _titulo: string;
    private _autor: string;
    private _anioPublicacion: number;
    private _disponible: boolean;

    constructor(_titulo: string, _autor: string, _anioPublicacion: number){
        this._titulo = _titulo;
        this._autor = _autor;
        this._anioPublicacion = _anioPublicacion;
        this._disponible = true;
    }

    public prestarLibro(): void{
        if(this._disponible){
            this._disponible = !this._disponible;
        } else {
            console.log(`El libro no puede ser prestado, no esta disponible`);
        }
    }

    public devolverLibro(): void{

EJERCICIO 3 Ejercicio de Estudiante
// Diseña una clase Estudiante que contenga propiedades privadas para nombre,
// edad, y calificaciones. Implementa métodos para agregar calificaciones y
// calcular el promedio. Imprime un mensaje en caso de que se intente agregar
// una calificación inválida (fuera del rango 0-100) o si no hay calificaciones para
// calcular el promedio.

class Estudiante{
    private _nombre: string;
    private _edad: number;
    private _calificaciones: number [] = [];

    constructor(nombre: string, edad: number){
        this._nombre = nombre;
        this._edad = edad;
    }

    public agregarCalificacion(calificacion: number) : void {
        if(calificacion >= 0 && calificacion <= 100){
            this._calificaciones.push(calificacion);
        } else {
            console.log(`Calificacion invalida debe estar entre 0 y 100`);       
        }
    }
    
    public calcularPromedio() : void {
        let suma = 0;
        if(this._calificaciones.length > 0){
            this._calificaciones.forEach(calificacion => {
                suma += calificacion;
            });
            const promedio = suma / this._calificaciones.length
            console.log(`El promedio de ${this._nombre} es de ${promedio.toFixed(2)}`);
        } else {
            console.log("No existen calificaciones para sacar el promedio");
            
        }
    }
}

const Nina = new Estudiante('Nina', 46);
nina.agregarCalificacion(90);
nina.agregarCalificacion(90)
nina.agregarCalificacion(100);
nina.calcularPromedio();
