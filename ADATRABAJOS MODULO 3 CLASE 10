// Ejercicio 1
Callbacks - Sistema de Pedidos de un Restaurante
// Consigna:
// Imagina que trabajas en un restaurante y tienes que gestionar varios pedidos al
// mismo tiempo. Crea una función llamada prepararPedido() que reciba como
// parámetros:
// • El nombre del plato
// • El tiempo estimado de preparación (en milisegundos)
// • Un callback que se ejecutará cuando el pedido esté listo
// Luego, simula la preparación de tres pedidos (por ejemplo: Pizza, Hamburguesa
// y Ensalada) con tiempos de preparación distintos. La función debe imprimir un
// mensaje al iniciar cada pedido y otro mensaje cuando el pedido esté listo.
// Además:
// 1. Implementa otro callback que se ejecute al final, después de todos los
// pedidos, para mostrar el mensaje: "¡Todos los pedidos han sido
// completados!".
// 2. Controla el orden en el que se imprimen los mensajes para evitar que se
// mezclen (es decir, no puede imprimirse el mensaje final hasta que todos
// los pedidos estén listos).
// Objetivo:
// Practicar el uso de callbacks anidados y la gestión de procesos asincrónicos.
// Asegúrate de que se ejecuta cada función en el momento correcto.
function prepararPedido(nombrePlato, tiempo, callback){
    console.log(`Preparando la ${nombrePlato}`);
    setTimeout(() => {
        console.log(`${nombrePlato} esta listo`);
        callback();
    }, tiempo);
}

function completarTodosLosPedidos(){
    console.log('Todos los platos han sido completados');
}

prepararPedido('Pizza', 2000, () => {
    prepararPedido('Hamburguesa', 1000, () => {
        prepararPedido('Ensalada', 100, completarTodosLosPedidos)
    })
})

EJERCICIO 2 
 Promesas - Simulador de Envío de Correos Electrónicos
// Consigna:
// Vas a crear una función llamada enviarCorreo() que simule el envío de un correo
// electrónico usando una promesa. La promesa debe cumplir con los siguientes
// requisitos:
// 1. Resolver si el correo fue enviado exitosamente (usa Math.random() para
// simular éxito o error).
// 2. Rechazar si ocurre un fallo en el envío.
// 3. La operación debe tardar 2 segundos en completarse (usa setTimeout()).
// 4. Implementa .then(), .catch(), y .finally() para manejar la respuesta:
// o Si el correo se envía exitosamente, imprime el mensaje: "Correo
// enviado a [destinatario]".
// o Si falla, imprime: "Error: No se pudo enviar el correo a [destinatario]".
// o En finally(), muestra siempre el mensaje: "Operación finalizada".
// Implementa la función para enviar correos a dos destinatarios distintos.
function enviarCorreo(destinatario){
    return new Promise((resolve, reject) => {
        console.log(`Se esta enviando el correo... `);
    
        setTimeout(() => {
            const correoEnviadoExitosamente = Math.random() > 0.5;
    
            if(correoEnviadoExitosamente) {
                resolve();
            } else {
                reject();
            }
        }, 2000)
    })
    .then(() => {
        console.log("Correo enviado exitosamente a", destinatario);
    })
    .catch(() => {
        console.log("No se pudo enviar hubo un error");
    })
    .finally(() => {
        console.log();
    })
}

enviarCorreo('nina@gmail.com');
enviarCorreo('maria@gmail.com');
enviarCorreo('matilda@gmail.com');
enviarCorreo('juan@gmail.com');

EJERCICIO 3
